package com.Utils;

import java.io.IOException;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.StoredProcedureQuery;
import javax.persistence.TypedQuery;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;

import entity.Favorite;
import entity.Report;
import entity.ReportFavoriteUser;
import entity.User;
import entity.Video;

import DAO.FavoritesDAO;
import DAO.UserDAO;
import domain.ReportUser;

@WebServlet({ "/ReportServlet", "/ReportServlet/Create", "/ReportServlet/Update", "/ReportServlet/Delete",
		"/ReportServlet/Edit", "/ReportServlet/Reset", "/ReportServlet/select" })
public class ReportServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String uri = req.getRequestURI();
		User user = null;
		if (uri.contains("Create")) {
			create(req, resp);
			// user = new User();
			req.setAttribute("user", user);
		}
		if (uri.contains("Delete")) {
			remove(req, resp);
			user = new User();
			req.setAttribute("user", user);
		}
		if (uri.contains("Update")) {
			update(req, resp);
			req.setAttribute("user", user);
		}
		if (uri.contains("Reset")) {
			user = new User();
			req.setAttribute("user", user);
			req.setAttribute("disable", "");
		}
		if (uri.contains("Edit")) {
			edit(req, resp);
		}
		if (uri.contains("select")) {
			selectOptionTitle(req, resp);
			req.setAttribute("users", user);

		}
		findAll(req, resp);
		findTitleVideo(req, resp);
//		selectOptionTitle(req, resp);
		req.getRequestDispatcher("/page/STATISTICAL.jsp").forward(req, resp);
//		req.getRequestDispatcher("/views/user.jsp").forward(req, resp);
	}

	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		req.setCharacterEncoding("utf-8");
		resp.setCharacterEncoding("utf-8");
		String uri = req.getRequestURI();
		if (uri.contains("Create")) {
			create(req, resp);
		}
		if (uri.contains("Update")) {
			update(req, resp);
		}
		if (uri.contains("Delete")) {
			remove(req, resp);
			req.setAttribute("user", new User());
		}
		if (uri.contains("Reset")) {
			req.setAttribute("disable", "");
			req.setAttribute("user", new User());
		}
		if (uri.contains("select")) {
			selectOptionTitle(req, resp);
		}
		findAll(req, resp);

		req.getRequestDispatcher("/page/STATISTICAL.jsp").forward(req, resp);
//		req.getRequestDispatcher("/views/user.jsp").forward(req, resp);
	}

	public void findAll(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		try {
			EntityManagerFactory emf = Persistence.createEntityManagerFactory("Movies");
			EntityManager em = emf.createEntityManager();
			String jpql = "select new Report(o.video.title, count(o.id), max(o.likeDate), min(o.likeDate)) from Favorite o group by o.video.title";
			List<Report> report = (List<Report>) em.createQuery(jpql, Report.class).getResultList();
			req.setAttribute("report", report);
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("error", "Error" + e.getMessage());
		}
	}

	public void edit(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		try {
			String userID = req.getParameter("id");
			UserDAO dao = new UserDAO();
			User user = dao.findByID(userID);
			req.setAttribute("disable", "disable");
			req.setAttribute("user", user);
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("error", "Error" + e.getMessage());
		}
	}

	public void update(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		try {
			User user = new User();
			BeanUtils.populate(user, req.getParameterMap());
			UserDAO dao = new UserDAO();
			dao.update(user);
			req.setAttribute("disable", "");
			req.setAttribute("message", "User update successfully");
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("disable", "disable");
			req.setAttribute("error", "Error" + e.getMessage());
		}
	}

	public void create(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		try {
			User user = new User();
			BeanUtils.populate(user, req.getParameterMap());
			UserDAO dao = new UserDAO();
			dao.create(user);
			req.setAttribute("message", "User create successfully");
			findAll(req, resp);
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("error", "Error" + e.getMessage());
		}
	}

	public void remove(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		try {
			String id = req.getParameter("id");
			UserDAO dao = new UserDAO();
			dao.delete(id);
			req.setAttribute("message", "User delete successfully");
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("error", "Error" + e.getMessage());
		}
	}

	public void findTitleVideo(HttpServletRequest req, HttpServletResponse resp) {
		try {
			EntityManagerFactory emf = Persistence.createEntityManagerFactory("Movies");
			EntityManager em = emf.createEntityManager();
			String jpql = "SELECT u FROM Video u";
			List<Video> title = (List<Video>) em.createQuery(jpql, Video.class).getResultList();
			req.setAttribute("title", title);
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("error", "Error" + e.getMessage());
		}

	}

	EntityManagerFactory emf = Persistence.createEntityManagerFactory("Movies");
	EntityManager em = emf.createEntityManager();

	public void selectOptionTitle(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {

		try {
//			String jpql = "select o from Video o where o.favorites IS EMPTY";
			String title = req.getParameter("title");
			StoredProcedureQuery query = em.createNamedStoredProcedureQuery("ReportFavoriteUser.spFavoriteByTitle");
			query.setParameter("title", title);
			List<Object[]> list = query.getResultList();
			req.setAttribute("reports", list);
			req.getRequestDispatcher("/page/STATISTICAL.jsp").forward(req, resp);
		} catch (Exception e) {
			// TODO: handle exception

			e.printStackTrace();
		}
//		List<ReportFavoriteUser> report = (List<ReportFavoriteUser>) em.createQuery(sql, ReportFavoriteUser.class)
//				.getResultList();
	}

}
