package com.client;

import java.io.IOException;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.catalina.Session;
import org.apache.commons.beanutils.BeanUtils;

import com.Utils.SessionU;
import com.Utils.SessionUtils;

import DAO.ShareDAO;
import DAO.UserDAO;
import DAO.VideoDAO;
import domain.ChangePassF;
import entity.User;

import entity.Share;
import entity.Video;

import com.Utils.EmailUtils;
import domain.Email;

@WebServlet({ "/login", "/regis", "/logout", "/change", "/forgotPass", "/editPro", "/shareVideo", "/favorite" })
public class AccountServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private UserDAO daoUser = new UserDAO();
	private VideoDAO daoVideo = new VideoDAO();

	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String uri = req.getRequestURI();
		HttpSession session = req.getSession();
		if (uri.contains("login")) {
			req.getRequestDispatcher("/views/login.jsp").forward(req, resp);
		} else if (uri.contains("logout")) {
			logout(session, req, resp);
		} else if (uri.contains("regis")) {
			req.getRequestDispatcher("/views/signUp.jsp").forward(req, resp);
		} else if (uri.contains("change")) {
			req.getRequestDispatcher("/views/changePassWord.jsp").forward(req, resp);
		} else if (uri.contains("forgotPass")) {
			req.getRequestDispatcher("/views/forgotPassWord.jsp").forward(req, resp);
		} else if (uri.contains("editPro")) {
			req.getRequestDispatcher("/views/editProfile.jsp").forward(req, resp);
		} else if (uri.contains("shareVideo")) {
			List<Video> video = daoVideo.findAll();
			VideoDAO dao = new VideoDAO();

//			int idProduct = Integer.parseInt(req.getParameter("idProduct"));
//			req.setAttribute("video", video.get(idProduct));
			req.setAttribute("video", daoVideo.findAll());
			req.getRequestDispatcher("/views/sendMail.jsp").forward(req, resp);
		} else if (uri.contains("favorite")) {
			req.getRequestDispatcher("/views/favorite.jsp").forward(req, resp);
		}

	}

	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String uri = req.getRequestURI();
		HttpSession session = req.getSession();
		if (uri.contains("login")) {
			login(session, req, resp);
//			 req.getRequestDispatcher("/views/login.jsp").forward(req, resp);
		} else if (uri.contains("regis")) {
			register(session, req, resp);
		} else if (uri.contains("change")) {
			try {
				changePass(session, req, resp);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else if (uri.contains("forgotPass")) {
			forgotPass(req, resp);
		} else if (uri.contains("editPro")) {
			doEditProfile(session, req, resp);
		} else if (uri.contains("shareVideo")) {

			try {
				shareVideo(req, resp);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else if (uri.contains("favorite")) {
			favorite(req, resp);
		}
	}

	public void login(HttpSession session, HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		try {
			String username = req.getParameter("username");
			String password = req.getParameter("password");
			User user = daoUser.login(username, password);
			if (user != null && user.getAdmin() == true) {
				session.setAttribute(SessionU.CURENT_USER, user);
				resp.sendRedirect("admin");
			} else if (user != null) {
				session.setAttribute(SessionU.CURENT_USER, user);
				resp.sendRedirect("index");
			} else {
				resp.sendRedirect("login");
			}
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("error", "Error" + e.getMessage());
		}

	}

	public void logout(HttpSession session, HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		session.removeAttribute(SessionU.CURENT_USER);
		resp.sendRedirect("index");
	}

	public void register(HttpSession session, HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		String username = req.getParameter("id");
		String password = req.getParameter("password");
		String email = req.getParameter("email");
		String fullname = req.getParameter("fullname");

		User user = new User();
		user.setId(username);
		user.setPassword(password);
		user.setEmail(email);
		user.setFullname(fullname);
		user.setAdmin(false);
		daoUser.create(user);
		if (user != null) {
			session.setAttribute(SessionU.CURENT_USER, user);
			resp.sendRedirect("index");
		} else {
			resp.sendRedirect("regis");
		}
	}

	private void doEditProfile(HttpSession session, HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {

		try {
			User user = new User();
			BeanUtils.populate(user, req.getParameterMap());
			UserDAO dao = new UserDAO();
			dao.update(user);
			req.setAttribute("disable", "");
			req.setAttribute("messageEdit", "User update successfully");
			Thread.sleep(5000);
			resp.sendRedirect("index");
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("disable", "disable");
			req.setAttribute("error", "Error" + e.getMessage());
		}

	}

	public void changePass(HttpSession session, HttpServletRequest req, HttpServletResponse resp)
			throws IOException, InterruptedException {
		String username = req.getParameter("username");
		String password = req.getParameter("password");
		String newPassword = req.getParameter("newpass");
		String confirmPass = req.getParameter("confirmPass");
		String fullName = req.getParameter("fullname");
		String email = req.getParameter("email");
		boolean admin = Boolean.parseBoolean(req.getParameter("admin"));
		User user = new User();
		if (user == null) {
			resp.sendRedirect("login");
		} else if (!newPassword.equals(confirmPass)) {
			req.setAttribute("message", "Update thất bại!");
			Thread.sleep(5000);
			resp.sendRedirect("change");
		} else {
			user.setId(username);
			user.setFullname(fullName);
			user.setEmail(email);
			user.setPassword(newPassword);
			user.setAdmin(admin);
			UserDAO dao = new UserDAO();
			dao.update(user);
			req.setAttribute("message", "Update thành công!");
			Thread.sleep(5000);
			resp.sendRedirect("index");
		}
	}

	EntityManagerFactory emf = Persistence.createEntityManagerFactory("Movies");
	EntityManager em = emf.createEntityManager();

	public void favorite(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("hello");
		String jpql = "select o from Video o where o.favorites IS EMPTY";
		List<Video> list = (List<Video>) em.createQuery(jpql, Video.class).getResultList();
		req.setAttribute("videos", list);
		req.getRequestDispatcher("/views/favorite.jsp").forward(req, resp);
	}

	public void forgotPass(HttpServletRequest req, HttpServletResponse resp) {
		try {
			UserDAO dao = new UserDAO();
			String emailFrom = "vietbx23@gmail.com";
			String passForm = "ncwjbtrlddlgijeb";
			String emailTo = req.getParameter("email");
			String username = req.getParameter("username");
			User user = dao.findByUserEmail(username, emailTo);
			if (user == null) {
				req.setAttribute("error", "Username or email are incorrect");
			} else {
				domain.Email email = new domain.Email();
				email.setFrom(emailFrom);
				email.setFromPassword(passForm);
				email.setTo(emailTo);
				email.setSubject("Forgot Password | BXVMEDIA");
				String msg = "Dear, " + user.getFullname()
						+ "<br/>You are used the forgot password function.<br/>Your password is <b>"
						+ user.getPassword() + "</b><br/>Regards<br/>Administrator";
				email.setContent(msg);
				com.Utils.EmailUtils.send(email);
				req.setAttribute("message", "Email has been sent! Please check and get your password.");
				Thread.sleep(5000);
				resp.sendRedirect("index");
			}
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("error", "Error: " + e.getMessage());
		}
	}

	public void shareVideo(HttpServletRequest request, HttpServletResponse response) throws Exception {
		try {
			String queryString = request.getQueryString();

			UserDAO dao = new UserDAO();
			String emailFrom = "vietbx23@gmail.com";
			String passForm = "ncwjbtrlddlgijeb";
			String emailTo = request.getParameter("emailAddress");
			String username = request.getParameter("username");
			String fullname = request.getParameter("fullname");
			String link = request.getParameter("link");
			Video video = new Video();

			domain.Email email = new domain.Email();
			email.setFrom(emailFrom);
			email.setFromPassword(passForm);
			email.setTo(emailTo);
			email.setSubject(fullname + " Send Video Link | BXVMEDIA");
			String msg = "Dear, " + fullname + "<br/>You are used the share video function.<br/>Your link is <b>" + link
					+ "</b><br/>Regards<br/>Administrator";
			email.setContent(msg);
			com.Utils.EmailUtils.send(email);
			request.setAttribute("message", "Email has been sent! Please check and get your password.");
			Thread.sleep(5000);

			User user = new User();

			Date date = new Date();
			Share s = new Share();
			s.setEmails(emailTo);
			s.setShareDate(date);
			user.setId(username);
			video.setId(String.valueOf(queryString.charAt(queryString.length() - 1)));

			ShareDAO sharedao = new ShareDAO();
			sharedao.create(s);
			response.sendRedirect("index");
		} catch (Exception e) {
			e.printStackTrace();
			request.setAttribute("error", "Error: " + e.getMessage());
		}

	}
}
