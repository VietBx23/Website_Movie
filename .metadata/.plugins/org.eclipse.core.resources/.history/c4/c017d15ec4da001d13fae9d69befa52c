package Dao;

import java.awt.print.Book;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.TypedQuery;

import Entity.Books;

import utils.JpaUtils;

public class BooksDAO {

	public void create(Books books) {
		EntityManager em = JpaUtils.getEntityManager();
		EntityTransaction trans = em.getTransaction();
		try {
			trans.begin();
//			Product.setId("Kiet");
//			Product.setFullname("Lê Anh Kiệt");
//			Product.setEmail("kiet@gmail.com");
//			Product.setPassword("123456");
//			Product.setAdmin(true);
			em.persist(books);
			trans.commit();
			System.out.println("Thêm mới thành công!");
		} catch (Exception e) {
			e.printStackTrace();
			trans.rollback();
			System.out.println("Error:" + e.toString());
			throw e;
		} finally {
			em.close();
		}
	}

	public void update(Books books) {
		EntityManager em = JpaUtils.getEntityManager();
		EntityTransaction trans = em.getTransaction();
		try {
			trans.begin();
//			Product = em.find(Product.class, "Kiet");
//			Product.setPassword("kiet123");

			em.merge(books);
			trans.commit();
			System.out.println("Cập nhật thành công!");
		} catch (Exception e) {
			e.printStackTrace();
			trans.rollback();
			throw e;
		} finally {
			em.close();
		}
	}

	public void delete(String id) throws Exception {
		EntityManager em = JpaUtils.getEntityManager();
		EntityTransaction trans = em.getTransaction();
		try {
			trans.begin();
			Books pro = em.find(Books.class, id);
			if (pro != null) {
				em.remove(pro);
			} else {
				throw new Exception("This Product does not exist");
			}
			trans.commit();
		} catch (Exception e) {
			e.printStackTrace();
			trans.rollback();
			throw e;
		} finally {
			em.close();
		}
	}

	public List<Books> findAll() {
		EntityManager em = JpaUtils.getEntityManager();
		String sql = "SELECT u FROM Book u";
		TypedQuery<Books> query = em.createQuery(sql, Books.class);
		return query.getResultList();
	}
	public Books findByID(String id) {
		EntityManager em = JpaUtils.getEntityManager();
		Books Product = em.find(Books.class, id);
		return Product;
	}
}
